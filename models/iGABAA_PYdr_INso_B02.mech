% # iGABAA_PYdr_INso_B02: Normalized synaptic GABA-Aergic inhibitory
%     current, with synaptic depression and minis, FROM the interneuron
%     axo-soma TO pyramidal dendrite PYdr<-INso_B02 connection used in the
%     DynaSim implementation of (Bazhenov et al., 2002). Note that in the
%     original code, the class for this current is called GABA_A_D2, INso_B02
%     compartments are called CX, IN, or CX_SOMA, and PYdr compartments are
%     called CX or CX_DEND. Also note that, instead of using a Heaviside
%     increase in transmitter concentration upon spike detection, we used the
%     (1 + tanh(V/4)) formulation from (Ermentrout & Kopell, 1998) for our
%     spike detector and transmitter concentration model.
%
% - Note: Despite the paper, and its parents papers, only mentioning depression
%     only for "intracortical excitatory connections", in the original code,
%     synaptic depression does appear to be implemented and turned on for
%     GABA_A_D2, thus we include it. Relatedly, in the parent codebase of
%     (Bazhenov et al., 2002), synaptic depression is implemented but de facto
%     turned off by initializing `Use` to 0 in file "neur271.c" line 1104.
%
% - Dependencies:
%     - netconNearestNeighbors.m
%     - newReleaseUpdate.m
%
% - References:
%     - Bazhenov M, Timofeev I, Steriade M, Sejnowski TJ. Model of
%         thalamocortical slow-wave sleep oscillations and transitions to
%         activated states. The Journal of Neuroscience. 2002;22: 8691–8704.
%     - Ermentrout GB, Kopell N. Fine structure of neural spiking and
%         synchronization in the presence of conduction delays. Proceedings of
%         the National Academy of Sciences. 1998;95: 1259–1264.
%
% - Tags: synapse, connection, inhibition, gabaa
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Parameters
gGABAA =     0.3 % mS/cm^2
gMiniGABAA = 0.3 % mS/cm^2
EGABAA = -70 % mV

deprGABAAIC = 1
deprGABAANoiseIC = 0
laRelIC = 0
laRelNoiseIC = 0
laRelOneIC = 0
laRelOneNoiseIC = 0
laMiniIC = -10000
laMiniNoiseIC = 0
% neMiniIC = 75
neMiniIC = 0
% neMiniNoiseIC = 20
neMiniNoiseIC = 0
sGABAAIC = 0
sGABAANoiseIC = 0
sGABAAMiniIC = 0
sGABAANoiseMiniIC = 0


Rinf = 0.72

miniFreq = 20 % in Hz
% This is used both for comparing floats the correct way in
%     `IMiniGABAA_PYdr_INso_B02_read`, and as a minimum in the
%     `newReleaseUpdate` function.
epsilon = 0.000001

% In the original code, this sleep stage experimental factor is represented by
%     `fac_GABA_D2`
fac_MiniGABAA_PYdr_INso_B02 = 1

% This is our DynaSim-varied, cell-type-NONspecific adjustment factor
fac_GABAA_cort_large_vary = 0

% Propofol parameters:
propofolMiniCondMult = 1




% Note that alpha rate here corresponds to the inverse of the rise  time constant, 1/tauR, and
%        the beta rate here corresponds to the inverse of the decay time constant, 1/tauD
% alpha = 0.53 % ms^-1
% beta  = 0.18 % ms^-1
alpha = 10 % ms^-1
beta  = 0.25 % ms^-1

% In the original code, this sleep stage experimental factor is represented by
%     `fac_GABA_D2`
fac_GABAA_PYdr_INso_B02 = 1

% This is our DynaSim-varied, cell-type-NONspecific adjustment factor
fac_GABAA_cort_large_vary = 0

% Synaptic depression parameters:
% The proportion of total "resources" used in each action potential
% In the original code, this is `Use`
resUse = 0.07  % unitless
resUseMini = 0  % unitless
% In the original code, this is `Tr`
tauRecov = 700 % in ms

% Propofol parameters:
propofolTauMult =  1
propofolCondMult = 1

% Connective radius, aka how many target cells each source cell connects to,
%     from the source's perspective.
radius = 5

% We also need to normalize the conductance in mS/cm^2 by the number of
%     connections each target cell is receiving on average, so that the TOTAL sum
%     of their conductive inputs adds to our overall maximal conductance above.
% AES
% normalizingFactor = min(((2*radius + 1) / (N_post/N_pre)), N_pre)
normalizingFactor = 2
% AES Upon later inspection, I accidentally swapped PY<->IN normalizers
% normalizingFactor = 6

% Keep connections to compartment with the same index
removeRecurrentBool = 0
% Note that what is passed is 2x the radius
netcon = netconNearestNeighbors(2*radius, N_pre, N_post, removeRecurrentBool)

% Functions
% This checks for if there has been enough time since the last spike AND the
%     last mini, similar to, in the original code, "currents.cpp" line 514.
% AES
% checkTime(t,lastRelease,lastReleaseOne,newRelease) = ((t-tspike_pre)>100).*((t-lastRelease)>newRelease)
checkTime(t,lastRelease,lastReleaseOne,newRelease) = ((t-lastReleaseOne)>70).*((t-lastRelease)>newRelease)


% Unfortunately, due to the way DynaSim works, the "lastRelease" state variable
%     is updated AFTER the current function "IMiniGABAA_PYdr_INso_B02" is used
%     in the dv/dt of the target cell, but BEFORE the monitors are calculated.
%     And because lastRelease is not a "true" state variable in the biophysical
%     sense, but instead a "hack" for us to track the last mini time, we have
%     to use DIFFERENT time checks (therefore two different functions) for how
%     the minis affect the simulation, vs how we actually read out the minis'
%     contribution themselves. Hence, for data visualization purposes, we only
%     need to monitor "IMiniGABAA_PYdr_INso_B02_read".
% In other words, this is the function actually used in the simulation:
IMiniGABAA_PYdr_INso_B02(X,t,sMini,depr) = (-((fac_MiniGABAA_PYdr_INso_B02+fac_GABAA_cort_large_vary).*propofolMiniCondMult.*gMiniGABAA/normalizingFactor).*(depr.*sMini)*netcon).*(X-EGABAA)

IGABAA_PYdr_INso_B02(X,s,depr) = -(fac_GABAA_PYdr_INso_B02+fac_GABAA_cort_large_vary)*propofolCondMult*gGABAA/normalizingFactor.*((depr.*s)*netcon).*(X-EGABAA)

% This way we record the synaptic currents!
monitor IMiniGABAA_PYdr_INso_B02
monitor IGABAA_PYdr_INso_B02


% ODEs and ICs
% The "state" of the newRelease state variable is a random minimum AMOUNT of
%     time until the next mini can happen for that synapse. (This is where the
%     magic happens). newRelease is ONLY changed when a mini happens, unlike
%     lastRelease, which changes depending on if there was either a spike OR a
%     mini.
% Note that `checkTime` is an internal function defined above, but
%     `newReleaseUpdate` is an external function defined in
%     `newReleaseUpdate.m`.
% AES: Note: if first lastRelease check is not satisfied but checkTime is, then
% new newRelease value will be calculated, but does that even matter? probably
% not
% newRelease' = checkTime(t,lastRelease,lastReleaseOne,newRelease).*((newReleaseUpdate((t-tspike_pre),miniFreq,epsilon,N_pre) - newRelease)./dt)
newRelease' = checkTime(t,lastRelease,lastReleaseOne,newRelease).*((newReleaseUpdate((t-lastReleaseOne),miniFreq,epsilon,N_pre) - newRelease)./dt)
% newRelease' = 0
newRelease(0) = neMiniIC+neMiniNoiseIC.*rand(1,N_pre)

% The "state" of the lastRelease state variable is the ACTUAL time of the
% EITHER previous mini OR spike
% lastRelease' = checkTime(t,lastRelease,lastReleaseOne,newRelease).*((t - lastRelease)./dt)
% lastRelease' = ((t-lastRelease-0.3-1)>0).*checkTime(t,lastRelease,lastReleaseOne,newRelease).*((t - lastRelease)./dt) + ((t-lastRelease-0.3-1)>0).*(X_pre>0).*((t - lastRelease)./dt)
% AES no minis
lastRelease' = ((t-lastRelease-0.3-1)>0).*checkTime(t,lastRelease,lastReleaseOne,newRelease).*((t - lastRelease)./dt) + ((t-lastRelease-0.3-1)>0).*(X_pre>0).*((t - lastRelease)./dt)
lastRelease(0) = laRelIC+laRelNoiseIC.*rand(1,N_pre)
lastReleaseOne' = ((t-lastReleaseOne-0.3-1)>0).*(X_pre>0).*((t - lastReleaseOne)./dt)
lastReleaseOne(0) = laRelOneIC+laRelOneNoiseIC.*rand(1,N_pre)
lastMini' = ((t-lastRelease)>newRelease).*((t - lastMini)./dt)
lastMini(0) = laMiniIC+laMiniNoiseIC.*rand(1,N_pre)

% AES
% s' = alpha.*(1 + tanh(X_pre./4)).*(1-s) - (beta/propofolTauMult).*s
s' = alpha.*Rinf.*0.5.*(1 + tanh(X_pre./4)).*(1-s) - (beta/propofolTauMult).*s
s(0) = sGABAAIC+sGABAANoiseIC.*rand(1,N_pre)

sMini' = alpha.*(((t-lastMini)<0.3)*Rinf).*(1-sMini) - beta.*sMini
sMini(0) = sGABAAMiniIC+sGABAANoiseMiniIC.*rand(1,N_pre)

% This represents the amount of synaptic resources available
depr' = (((t-lastRelease-0.3-1)>0).*(X_pre>0).*(((1 - (1 - depr.*(1-resUse)).*exp(-(t-lastReleaseOne-0.3-1)./tauRecov))-depr))./dt) + ((t-lastRelease-0.3-1)>0).*checkTime(t,lastRelease,lastReleaseOne,newRelease).*(((1 - (1 - depr.*(1-resUseMini)).*(abs(-(t-lastReleaseOne)/tauRecov)<10).*exp(-(t-lastReleaseOne)./tauRecov))-depr)./dt)

depr(0) = deprGABAAIC+deprGABAANoiseIC*rand(1,N_pre)

% Linker
@current += IGABAA_PYdr_INso_B02(X_post,s,depr) + IMiniGABAA_PYdr_INso_B02(X_post,t,sMini,depr)
